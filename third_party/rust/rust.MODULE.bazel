# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

# Dependencies:
bazel_dep(name = "rules_rust", version = "0.56.0")
bazel_dep(name = "rules_rust_bindgen", version = "0.56.0")
bazel_dep(name = "toolchains_llvm", version = "1.1.2")

# Overrides and patches:
single_version_override(
    module_name = "rules_rust",
    patches = [
        "//third_party/rust/patches:rules_rust.extra_rustc_toolchain_dirs.patch",
    ],
    patch_strip = 1,
    version = "0.56.0",
)

single_version_override(
    module_name = "rules_rust_bindgen",
    patches = [
        "//third_party/rust/patches:rules_rust.bindgen_static_lib.patch",
        "//third_party/rust/patches:rules_rust.bindgen_defines.patch",
    ],
    patch_strip = 3,
    version = "0.56.0",
)

# rustc --version  --verbose

# Rust toolchain:
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.repository_set(
    name = "rust_host",
    edition = "2021",
    exec_triple = "aarch64-apple-darwin",
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:osx",
    ],
    target_triple = "aarch64-apple-darwin",
    # Use nightly that Rust 1.84 branches from.
    versions = ["nightly/2024-11-22"],
)
rust.repository_set(
    name = "rust_tock",
    edition = "2021",
    exec_triple = "aarch64-apple-darwin",
    target_compatible_with = [
        "@platforms//cpu:riscv32",
    ],
    target_triple = "riscv32imc-unknown-none-elf",
    # For RISC-V toolchain, we currently don't support LLVM 16+ due to old binutils version.
    # Rust updated its LLVM 17 on 2023-08-08.
    versions = ["nightly/2023-07-30"],
)
use_repo(rust, "rust_toolchains")
register_toolchains("@rust_toolchains//:all")

# Rust crates:
crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.from_cargo(
    name = "crate_index",
    cargo_lockfile = "//third_party/rust:Cargo.lock",
    manifests = ["//third_party/rust:Cargo.toml"],
    # By default rules_rust will analyze dependencies for all supported target triples, which is very slow.
    # Restrict to ones that we're interested in. See https://github.com/bazelbuild/rules_rust/issues/2876
    supported_platform_triples = [
        "aarch64-apple-darwin",
    ],
)
crate.annotation(
    crate = "libudev-sys",
    patch_args = ["-p1"],
    patches = ["@//third_party/rust/patches:libudev-sys-0.1.4.patch"],
    repositories = ["crate_index"],
)
crate.annotation(
    crate = "cryptoki",
    patch_args = ["-p2"],
    patches = [
        "@lowrisc_opentitan//third_party/rust/patches:cryptoki-vendor-defined-mechanism-type.patch",
        "@lowrisc_opentitan//third_party/rust/patches:cryptoki-profile.patch",
    ],
    repositories = ["crate_index"],
)
crate.annotation(
    additive_build_file_content = """
        filegroup(
            name = "binding_srcs",
            srcs = [
                "src/lib.rs",
                "src/bindings/aarch64-apple-darwin.rs",
            ],
        )
    """,
    crate = "cryptoki-sys",
    extra_aliased_targets = {
        "cryptoki-sys-binding-srcs": "binding_srcs",
    },
    repositories = ["crate_index"],
)
crate.annotation(
    build_script_env = {
        "PKG_CONFIG_PATH": "$(OPENSSL_PKG_CONFIG_PATH)",
        "OPENSSL_STATIC": "1",
    },
    build_script_toolchains = ["@lowrisc_opentitan//third_party/rust:openssl_pkg_config_path"],
    crate = "openssl-sys",
    repositories = ["crate_index"],
)
use_repo(crate, "crate_index")

# mdbook (separate because it has a lot of dependencies):
crate.from_cargo(
    name = "mdbook_index",
    cargo_lockfile = "//third_party/mdbook:Cargo.lock",
    manifests = ["//third_party/mdbook:Cargo.toml"],
    supported_platform_triples = [
        "aarch64-apple-darwin",
    ],
)
crate.annotation(
    crate = "mdbook",
    gen_binaries = ["mdbook"],
    patch_args = ["-p1"],
    patches = ["@//third_party/mdbook/patches:mdbook-landing-page-links.patch"],
    repositories = ["mdbook_index"],
)
use_repo(crate, "mdbook_index")

# Rust bindgen toolchain:
register_toolchains("//third_party/rust:bindgen_toolchain")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    name = "llvm_toolchain",
    llvm_versions = {
        "": "16.0.0",
        "darwin-aarch64": "16.0.0",
    },
)

use_repo(llvm, "llvm_toolchain_llvm")
